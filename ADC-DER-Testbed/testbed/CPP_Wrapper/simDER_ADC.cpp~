/* C++ STL */
#include <iostream>

// Added parts
#include <iomanip>
#include <fstream>
#include <string>
#include <vector>

#include <stdio.h>
#include <math.h>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <sstream>
#include <string.h>
#include <ctime>
#include <vector>
#include <algorithm>

/* FNCS headers */
#include <fncs.hpp>

using namespace std; /* C++ standard namespace */

/* some C++ compilers have a nullptr instance,
 * otherwise we fall back to the old default of NULL */
#ifndef nullptr 
#define nullptr NULL
#endif

/* the current time of our simulator */
static fncs::time time_current=0;
/* time when sim will stop */
static fncs::time time_stop=10;

/* our simulator function, called by the main() function later */
static void generic_simulator()
{
    fncs::time time_granted=0; /* the time step FNCS has allowed us to process */
    fncs::time time_desired=0; /* the time step we would like to go to next */

    /* initialize FNCS with default configuration file fncs.zpl */
    fncs::initialize();

    /* unless FNCS detects another simulator terminates early, the
     * this simulator will run from time step 0 to time step "time_stop" */

// These are variables used to get and push values outside of FNCS
// 	vector<double> SubscribedValues;
// 	vector<string> SubscribedString; 
//	string line;
//	vector<string> myKeys;
//	vector<double> myValues, MyValues ;

    while (time_current < time_stop) {
        /* do useful work; check for incoming messages to the objects we
         * registered earlier */

	cout << "SimA: Working. Time is " << time_current << endl;
	        
	if (time_current<5) {
		fncs::publish("house2_R4_12_47_1_tm_15_floor_area", "3200");
		fncs::publish("tpm1_R4_12_47_1_tm_17_service_status", "OUT_OF_SERVICE");
	}
	
	else {
		fncs::publish("house2_R4_12_47_1_tm_15_floor_area", "4200");
		fncs::publish("tpm1_R4_12_47_1_tm_17_service_status", "IN_SERVICE");
	}

//--------------------------------------------------------------------------------------------	
//----------------This is the part to be interfaced with Andy's Wrapper-----------------------	
//
//	MyValues = myValues; // Get values to be published for GLD from Andy's code. Assumption is the values are contained in a double vector   
//			     //	Please make sure the size of the double vector from Andy is equals to the size of the keys to be published.
//
//	stringstream doubleToString; // a string stream used to transfer from double to string
//
//	ifstream myfile("ADC_106_AirConditioners.txt"); // provide filename which contains keys to be published for GLD
//
//	while (getline(myfile, line))
//	{
//	   myKeys.push_back(line);
//	}
//
//	for(vector<int>::size_type i = 0; i != myKeys.size(); i++) {
//	myValues.push_back(i*1+10); // This line is just for testing purpose. We need to delete when once we integrate this with C++ Wrapper 
//	doubleToString << myValues[i] ; // Variable you would like to publish
//	cout<<"String is: "<< myKeys[i]<< " and Value is: " <<doubleToString.str()<<endl;	
//	//	fncs::publish(myKeys[i], doubleToString.str());
//	doubleToString.str(string());				
//	}
//-------------------------------------------------------------------------------------------------


        /* Check for incoming messages. */ 
        vector<string> events = fncs::get_events();
        for (vector<string>::iterator key=events.begin();
                key!=events.end(); ++key) {
	    // SubscribedValues.push_back(atof(fncs::get_value(*key).c_str()));
	    // SubscribedString.push_back(*key); 
            cout << "SimA: received topic '"
                << *key
                << "' with value '"
                << fncs::get_value(*key)
                << "'"
                << endl;
        }

        /* Which time step do we wish to go to next? This does not
         * necessarily need to be a delta of 1; FNCS supports
         * arbitrary time deltas. */
        time_desired = time_current + 1;

        /* Synchronization by requesting the next time step. The next
         * time could very well be smaller than this simulator is able
         * to process i.e. the network simulator runs in nanoseconds
         * while this simulator runs in seconds. In such a case, the
         * time_granted will be the same as time_current. Another
         * possibility is that the time_granted is less than
         * time_desired due to another simulator requesting a smaller
         * time delta. */
        time_granted = fncs::time_request(time_desired);

        cout << "SimA: time_request"
            << " current=" << time_current
            << " desired=" << time_desired
            << " granted=" << time_granted << endl;

        time_current = time_granted;

// Clear the vectors
	// SubscribedValues.clear();
	// SubscribedString.clear();
	// myKeys.clear();
	// myValues.clear();
	// MyValues.clear();
    }
    cout << "SimA: DONE!" << endl;

    fncs::finalize();
}


/* a simple main that calls our simulator function;
 * it is sometimes useful to capture and report exceptions but this
 * might be overkill for your particular needs */
int main(int argc, char **argv)
{
    try {
        cout << "starting generic simulator" << endl;
        generic_simulator();
    } catch (const exception &e) {
        cout << e.what() << endl;
    }
    catch (const string &e) {
        cout << e << endl;
    }
    cout << "finished generic simulator" << endl;
    return 0;
}

